-- CREATE DATABASE SMR WITH OWNER = postgres ENCODING = 'UTF8' CONNECTION LIMIT = -1;

-- COMMENT ON DATABASE SMR IS 'Service Monthly Report';

-- CREATE SCHEMA IF NOT EXISTS SMR;

-- GRANT USAGE ON SCHEMA SMR TO GROUP CGIGROUP;


-- CREATE SEQUENCE IF NOT EXISTS ID_SEQ_USERS START WITH 1 INCREMENT BY 1;
-- GRANT USAGE, SELECT ON SEQUENCE ID_SEQ_USER TO GROUP CGIGROUP;

-- CREATE SEQUENCE IF NOT EXISTS ID_SEQ_SYSTEMS START WITH 1 INCREMENT BY 1;

-- CREATE SEQUENCE IF NOT EXISTS ID_SEQ_USERS_SYSTEMS START WITH 1 INCREMENT BY 1;
-- GRANT USAGE, SELECT ON SEQUENCE ID_SEQ_SYSTEM TO GROUP CGIGROUP;

-- CREATE SEQUENCE IF NOT EXISTS ID_SEQ_TIMEREPORT START WITH 1 INCREMENT BY 1;
-- GRANT USAGE, SELECT ON SEQUENCE ID_SEQ_TIMEREPORT TO GROUP CGIGROUP;

-- CREATE SEQUENCE IF NOT EXISTS ID_SEQ_TASK START WITH 1 INCREMENT BY 1;

-- CREATE SEQUENCE IF NOT EXISTS ID_SEQ_TASK_TYPE START WITH 1 INCREMENT BY 1;

-- CREATE SEQUENCE IF NOT EXISTS ID_SEQ_ACTION_TYPE START WITH 1 INCREMENT BY 1;

-- CREATE SEQUENCE IF NOT EXISTS ID_SEQ_ABSENCE_TYPE START WITH 1 INCREMENT BY 1;





-- CREATE SEQUENCE IF NOT EXISTS ID_SEQ_CUSTOMER START WITH 1 INCREMENT BY 1;

-- CREATE SEQUENCE IF NOT EXISTS SMR.ID_SEQ_USER START WITH 1 INCREMENT BY 1;
-- GRANT USAGE, SELECT ON SEQUENCE SMR.ID_SEQ_USER TO GROUP CGIGROUP;

-- CREATE SEQUENCE IF NOT EXISTS SMR.ID_SEQ_SYSTEM START WITH 1 INCREMENT BY 1;
-- GRANT USAGE, SELECT ON SEQUENCE SMR.ID_SEQ_SYSTEM TO GROUP CGIGROUP;

-- CREATE SEQUENCE IF NOT EXISTS SMR.ID_SEQ_TIMEREPORT START WITH 1 INCREMENT BY 1;
-- GRANT USAGE, SELECT ON SEQUENCE SMR.ID_SEQ_TIMEREPORT TO GROUP CGIGROUP;


-- User Table
CREATE TABLE IF NOT EXISTS USERS (
  USER_ID	        SERIAL PRIMARY KEY,
  FIRST_NAME	    VARCHAR(255) NOT NULL,
  LAST_NAME	        VARCHAR(255) NOT NULL,
  EMAIL		        VARCHAR(255) NOT NULL,
  USERNAME          VARCHAR(255) NOT NULL,
  SALT              VARCHAR(255),
  PASSHASH          VARCHAR(2048),
  ACTIVE            BOOLEAN DEFAULT TRUE,
  CONSTRAINT UC_USERNAME UNIQUE (USERNAME),
  CONSTRAINT UC_EMAIL UNIQUE (EMAIL),
  CONSTRAINT UC_SALT UNIQUE (SALT)
);
-- GRANT SELECT, UPDATE, INSERT, DELETE ON TABLE USERS TO postgres;


-- System Table
CREATE TABLE IF NOT EXISTS SYSTEMS (
  SYSTEM_ID         SERIAL PRIMARY KEY,
  SYSTEM_NAME       VARCHAR(255) NOT NULL,
  ACRONYM           VARCHAR(10) NOT NULL,
  ACTIVE            BOOLEAN DEFAULT TRUE,
  CONSTRAINT UC_NAME UNIQUE (SYSTEM_NAME),
  CONSTRAINT UC_ACRONYM UNIQUE (ACRONYM)
);
-- GRANT SELECT, UPDATE, INSERT, DELETE ON TABLE SYSTEMS TO postgres;


-- User_System Table
CREATE TABLE IF NOT EXISTS USERS_SYSTEMS (
  USERS_SYSTEMS_ID      SERIAL,
  USER_ID               SERIAL,
  SYSTEM_ID             SERIAL,
  DEFAULT_SYSTEM        BOOLEAN,    -- There must be only one system active
  ACTIVE                BOOLEAN,
  PRIMARY KEY (USERS_SYSTEMS_ID, USER_ID, SYSTEM_ID),
  FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID),
  FOREIGN KEY (SYSTEM_ID) REFERENCES SYSTEMS(SYSTEM_ID)
);
-- GRANT SELECT, UPDATE, INSERT, DELETE ON TABLE USERS_SYSTEMS TO postgres;

-- Task Type Table
CREATE TABLE IF NOT EXISTS TASK_TYPE (
  TASK_TYPE_ID          SERIAL PRIMARY KEY,
  TASK_TYPE_PARENT_ID   BIGINT,
  DESCRIPTION           VARCHAR(255),
  ACTIVE                BOOLEAN,
  FOREIGN KEY (TASK_TYPE_PARENT_ID) REFERENCES TASK_TYPE(TASK_TYPE_ID)
);
-- GRANT SELECT, UPDATE, INSERT, DELETE ON TABLE TASK_TYPE TO postgres;

-- Task Table
CREATE TABLE IF NOT EXISTS TASK (
  TASK_ID             SERIAL PRIMARY KEY,
  TASK_TYPE_ID        BIGINT NOT NULL,
  SYSTEM_ID           BIGINT NOT NULL,
  CODE                INTEGER,
  DESCRIPTION         VARCHAR(500),
  TASK_PARENT_ID      BIGINT,
  ESTIMATIVA          FLOAT,
  CONSTRAINT UC_CODE_SYSTEM UNIQUE (SYSTEM_ID),
  CONSTRAINT UC_CODE_CODE UNIQUE (CODE),
  FOREIGN KEY (TASK_TYPE_ID) REFERENCES TASK_TYPE(TASK_TYPE_ID),
  FOREIGN KEY (SYSTEM_ID) REFERENCES SYSTEMS(SYSTEM_ID),
  FOREIGN KEY (TASK_PARENT_ID) REFERENCES TASK(TASK_ID)
);
-- GRANT SELECT, UPDATE, INSERT, DELETE ON TABLE TASK TO postgres;


-- Action Type Table
CREATE TABLE IF NOT EXISTS ACTION_TYPE (
  ACTION_TYPE_ID    SERIAL PRIMARY KEY,
  DESCRIPTION       VARCHAR(255),
  ACTIVE            BOOLEAN DEFAULT TRUE
);
-- GRANT SELECT, UPDATE, INSERT, DELETE ON TABLE ACTION_TYPE TO postgres;




CREATE TABLE IF NOT EXISTS ABSENCE_TYPE (
  ABSENCE_TYPE_ID   SERIAL PRIMARY KEY,
  NAME              VARCHAR(255),
  ACTIVE            BOOLEAN DEFAULT TRUE
);
-- GRANT SELECT, UPDATE, INSERT, DELETE ON TABLE ABSENCE_TYPE TO postgres;




-- TimeReport Table
CREATE TABLE IF NOT EXISTS TIMEREPORT (
  TIMEREPORT_ID   SERIAL PRIMARY KEY,
  USER_ID         BIGINT NOT NULL,
  SYSTEM_ID       BIGINT NOT NULL,
  TASK_ID         BIGINT,
  TYPE_ACTION_ID  BIGINT,
  TYPE_ABSENCE_ID BIGINT,
  DATE            TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  HOURS           FLOAT,
  COMMENTS        VARCHAR(5000),
  FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID),
  FOREIGN KEY (SYSTEM_ID) REFERENCES SYSTEMS(SYSTEM_ID),
  FOREIGN KEY (TASK_ID) REFERENCES TASK(TASK_ID),
  FOREIGN KEY (TYPE_ACTION_ID) REFERENCES ACTION_TYPE(ACTION_TYPE_ID),
  FOREIGN KEY (TYPE_ABSENCE_ID) REFERENCES ABSENCE_TYPE(ABSENCE_TYPE_ID)
);
-- GRANT SELECT, UPDATE, INSERT, DELETE ON TABLE TIMEREPORT TO postgres;


-- DROP TABLE ABSENCE_TYPE CASCADE;
-- DROP TABLE ACTION_TYPE CASCADE;
-- DROP TABLE SYSTEMS CASCADE;
-- DROP TABLE TASK CASCADE;
-- DROP TABLE TASK_TYPE CASCADE;
-- DROP TABLE TIMEREPORT CASCADE;
-- DROP TABLE USERS CASCADE;
-- DROP TABLE USERS_SYSTEMS CASCADE;
